pipeline {

    // run on jenkins nodes tha has slave label .....

    agent { label 'slaves' }

    // global env variableee

    environment {

        EMAIL_RECIPIENTS = 'akshay.kg@bt.com'
        JIRA = 'https://agile.nat.bt.com/agileplanner/'
    }
    
    stages {
        
        stage('Build') {
            steps {
                // Run the maven build
                sh 'mvn clean deploy'
                
            }
        }
        stage("first"){
            steps {
                timestamps {
                      logstash{ 
                       echo "hello world 1"
                      }
                  
                }
            }
        }
        stage("second"){
            steps{
                timestamps {
                    logstash {
                        echo "hello world 2"
                    }
                }
            }
            }
       
        stage('Unit Testing junit')
        {
            steps
            {
                       junit 'target/surefire-reports/*.xml'

            }
        }
        stage('Code Coverage')
        {
          steps
          {
         
           jacoco()
           }
        }
        
        stage('Code Quality Check (Sonarqube)')
        {
          steps
          {
             script
             {
               def sonarscanner = tool 'sonar_scanner'
               withSonarQubeEnv('sonarqube-server') {
               
                    // some block
                    sh """
                    ${sonarscanner}/bin/sonar-scanner
                
                    """
                }
             }
          }
        }
        
        stage('Quality gate') {

            steps {

                timeout(time: 1, unit: 'MINUTES') {

                    retry(3) {

                        script {

                            def qg = waitForQualityGate()

                            if (qg.status != 'OK') {

                                error "Pipeline aborted due to quality gate failure: ${qg.status}"

                            }

                        }

                    }

                }

            }

        }
       

        stage('Upload to Nexus') {
            steps {
                // Deploy to Nexus
               nexusPublisher nexusInstanceId: 'nexus', nexusRepositoryId: 'EED_Engg-Excellence-Devops-POC_maven_releases', packages: []
            }
        }
    }
        post('Send Email') {
        failure {
            script {
        
                  jiraAddComment comment: "${JOB_NAME} build failed, Please check at ${BUILD_URL}", idOrKey: 'EED-318', site: 'JIRA'
            
                mail (to: 'rakshith.m@bt.com',
                        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) failed",
                        body: "Please visit ${env.BUILD_URL} for further information"
                );
                }
            }
         success {
             script {
                mail (to: 'rakshith.m@bt.com', 
                        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) success.",
                        body: "Please visit ${env.BUILD_URL} for further information.",


                  );
                }
            }      
         }
       stage('JIRA') {
    # Look at class for more intresting  information.
    def testIssue = [fields: [ // id or key must present for project.
                               project: [id: 'EED'],
                               summary: 'New issue Jenkins.',
                               description: 'New JIRA Created from Jenkins.',
                               customfield_1000: 'customValue',
                               // id or name must present for issueType.
                               issuetype: [id: '3']]]

    response = jiraNewIssue issue: testIssue

    echo response.successful.toString()
    echo response.data.toString()
  }
}
